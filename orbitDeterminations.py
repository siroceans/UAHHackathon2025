import numpy as npfrom math import factorial, sin, sqrt, cos, sinh, coshdef mag(v):    magnitude = np.sqrt(np.sum(v**2))    return magnitudedef futurePosition(r, v, dt):    """    Function that solves the TOF Equation iteratively to calculate the position     at a given time after the observation!    """    # Calculations of orbital parameters    maxno = 100    tol = 0.001 # Tolerance for iterative solutions    mu = 3.986004418 * 10 ** 5    #mu = 1    r = np.array(r)    v = np.array(v)    rmag = mag(r)    vmag = mag(v)    h = np.cross(r,v)    hmag = mag(h)    e = (1/mu) * ((vmag**2 - mu/rmag) * r - np.dot(r,v) * v)    emag = mag(e)     a = hmag ** 2 / (mu * (1 - emag ** 2))    n = np.sqrt(1/a**3)        # Iterative Process    xn = np.sqrt(mu) * dt / a     i = 0    check = True        while check:        i += 1        # Not printing iteration tables as of right now!                z = xn**2/a        if abs(z) < tol:            s = 1 / factorial(3) - z / factorial(5) + z**2 / factorial(7) - z**3 / factorial(9)            c = 1 / factorial(2) - z / factorial(4) + z**2 / factorial(6) - z**3 / factorial(8)        elif z > 0:            s = (sqrt(z) - sin(sqrt(z))) / sqrt(z**3);             c = (1 - cos(sqrt(z))) / z;         else:            s = (sinh(sqrt(-z)) - sqrt(-z)) / sqrt((-z)**3)            c = (1 - cosh(sqrt(-z)))/z                t = (1 / sqrt(mu)) * (xn**3 * s + np.dot(r,v) / sqrt(mu) * xn**2 * c + rmag * xn * (1-z*s))        rn = xn**2 * c + np.dot(r,v) / sqrt(mu) * xn * (1-z*s) + rmag*(1 - z * c)        dtdx = rn / sqrt(mu)        xn1 = xn + (dt - t) / (dtdx)                if abs(dt-t) < tol or i > maxno:            break        else:            xn = xn1            f = 1 - xn ** 2 / rmag * c     g = t - xn ** 3 / sqrt(mu) * s    fdot = (sqrt(mu) * xn) / (rmag * rn) * (z * s - 1)     gdot = 1 - xn ** 2 / rn * c         r2 = f * r + g * v     v2 = fdot * r + gdot * v         r2 = np.array(r2).tolist()    v2 = np.array(v2).tolist()    print("r2 = [{:.4f}, {:.4f}, {:.4f}]".format(r2[0], r2[1], r2[2]))    print("v2 = [{:.4f}, {:.4f}, {:.4f}]".format(v2[0], v2[1], v2[2]))    return r2, v2    futurePosition([0,1,0], [0,0,1], 3.1415926)