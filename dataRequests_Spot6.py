## Code that uses the OSH API for SPOT - 6 Satellite to gather and sort data ## Into separate .csv filesimport requests import numpy as npSPOT6_Satellite = 'https://api.georobotix.io/ogc/t18/api/systems/hqi2viohl2vci/datastreams/'datastreamID = {"Platform Attitude": 'nrq0hf0h1mofa/observations',                 "Platform Location": 'ceuaig4rlf746/observations',                 "Platform Velocity": 'u8noeomjdlgl2/observations'}AttitudeObs = requests.get(SPOT6_Satellite + datastreamID["Platform Attitude"])LocationObs = requests.get(SPOT6_Satellite + datastreamID["Platform Location"])VelocityObs = requests.get(SPOT6_Satellite + datastreamID["Platform Velocity"])## Sorting Attitude into listsattitudeDict = AttitudeObs.json()tStampA = []qx = []qy = []qz = []q0 = []for key in attitudeDict:    if key == "items":        itemsDict = attitudeDict[key]            for item in itemsDict:            tStampA.append(item["phenomenonTime"])            qx.append(item["result"]['att']['qx'])            qy.append(item["result"]['att']['qy'])            qz.append(item["result"]['att']['qz'])            q0.append(item["result"]['att']['q0'])            attList = [qx, qy, qz, q0]## Sorting Location into ListslocationDict = LocationObs.json()tStampL = []x = []y = []z = []for key in locationDict:    if key == "items":        itemsDict = locationDict[key]                for item in itemsDict:            tStampL.append(item["phenomenonTime"])            x.append(item["result"]['pos']['x'])            y.append(item["result"]['pos']['y'])            z.append(item["result"]['pos']['z'])            locList = [x, y, z]## Sorting Velocity into lists:velocityDict = VelocityObs.json()tStampV = []vx = []vy = []vz = []for key in velocityDict:    if key == "items":        itemsDict = velocityDict[key]                for item in itemsDict:            tStampV.append(item["phenomenonTime"])            vx.append(item["result"]['pos']['vx'])            vy.append(item["result"]['pos']['vy'])            vz.append(item["result"]['pos']['vz'])            velList = [vx, vy, vz]## Writing .csv files with the data# with open('SPOT6_CSV/platformAttitude.csv', 'w') as w:#     for i in range(len(tStampA)):#         if i == 0:#             w.write("Timestamp, qx, qy, qz, q0\n") #         w.write(f"{tStampA[i]}, {qx[i]}, {qy[i]}, {qz[i]}, {q0[i]}\n")        # with open('SPOT6_CSV/platformLocation.csv', 'w') as w:#     for i in range(len(tStampL)):#         if i == 0:#             w.write("Timestamp, x, y, z\n") #         w.write(f"{tStampL[i]}, {x[i]}, {y[i]}, {z[i]}\n")        # with open('SPOT6_CSV/platformVelocity.csv', 'w') as w:#     for i in range(len(tStampV)):#         if i == 0:#             w.write("Timestamp, vx, vy, vz\n") #         w.write(f"{tStampV[i]}, {vx[i]}, {vy[i]}, {vz[i]}\n")## Creating Arrays with the sensor data (for all of the math!)attArray = np.transpose(np.array(attList)) ## Satellite Attitude array, qx, qy, qz, q0locArray = np.transpose(np.array(locList)) ## Satellite location array, x, y, zvelArray = np.transpose(np.array(velList)) ## Satellite velocity array, vx, vy, vz